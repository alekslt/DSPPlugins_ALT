<Project>
  <!--
  <PropertyGroup>
    <ResolveReferencesDependsOn>BackupGameBinaries;$(ResolveReferencesDependsOn)</ResolveReferencesDependsOn>
  </PropertyGroup>

  <ItemGroup>
    <GameBackupFile Include="$(UnityGameName).exe" />
    <GameBackupFile Include="UnityPlayer.dll" />
    <GameBackupFile Include="WinPixEventRuntime.dll" />
    <GameBackupFile Include="VERSION" />
    <GameBackupFile Include="$(UnityGameName)_Data\boot.config" />
  </ItemGroup>
  -->

  <UsingTask TaskName="ParseGameVersionFile"
           TaskFactory="RoslynCodeTaskFactory"
           AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <!-- This should contain game install locations and thunderstore profiles -->
      <GameVersionFile ParameterType="Microsoft.Build.Framework.ITaskItem" Required="true" />
      <GameVersion ParameterType="System.String" Output="true" />
    </ParameterGroup>

    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.Collections.Generic" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Linq" />
      <Using Namespace="System.Reflection" />
      <Using Namespace="System.Text" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Method" Language="C#">
        <![CDATA[
        public override bool Execute()
        {
          var lines = File.ReadAllLines(GameVersionFile.ItemSpec);
          if (lines.Length >= 2) {
            if (lines[0].Trim() == "1") {
              GameVersion = lines[1];
              return true;
            }
          }
          
          Log.LogWarning("Could not parse VERSION file '{0}'", string.Join(Environment.NewLine, lines));
          return false;
        }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <!--
  <Target Name="ResolveGameVersion"
          Returns="@(GameVersionFile)"
          Condition="Exists('$(GameVersionBackup)')">
    <ParseGameVersionFile GameVersionFile="$(GameInstallLocation)VERSION">
      <Output TaskParameter="GameVersion" PropertyName="GameVersion" />
    </ParseGameVersionFile>

    <ItemGroup>
      <GameVersionFile Include="$(GameVersionBackup)$(GameVersion)\VERSION" />
    </ItemGroup>
    
    <Copy SourceFiles="$(GameInstallLocation)VERSION"
          DestinationFiles="@(GameVersionFile)"
          Retries="5"
          RetryDelayMilliseconds="100"
          SkipUnchangedFiles="true" />
  </Target>

  <Target Name="BackupGameBinaries"
          Inputs="@(GameVersionFile);@(GameBackupFile->'$(GameInstallLocation)%(Identity)')"
          Outputs="@(GameBackupFile->'$(GameVersionBackup)$(GameVersion)\%(Identity)')"
          DependsOnTargets="ResolveGameVersion"
          Condition="Exists('$(GameVersionBackup)')">

    <Copy SourceFiles="@(GameBackupFile->'$(GameInstallLocation)%(Identity)')"
          DestinationFiles="@(GameBackupFile->'$(GameVersionBackup)$(GameVersion)\%(Identity)')"
          Retries="5"
          RetryDelayMilliseconds="100"
          SkipUnchangedFiles="true" />
  </Target>
  -->
  
<Target Name="ConsoleStubber"
          Outputs="$(RefStubPath)Assembly-CSharp.refstub.dll.mdb')"
          DependsOnTargets="BeforeBuild">
    <PropertyGroup>
      <ConsoleStubberUrl>https://gist.github.com/alekslt/5db316679f1faadd5b59ddbd3ce1d5c5/raw/d8f832be02339e7fa19c5df2540efe742bb96bc9/ConsoleStubber.exe</ConsoleStubberUrl>
    </PropertyGroup>
    
    <ItemGroup>
      <StubberInput Include="$(UnityAssembliesPath)Assembly-CSharp.dll')" />
      <StubberOutput Include="$(RefStubPath)Assembly-CSharp.refstub.dll')" />
    </ItemGroup>
    
    <DownloadFile SourceUrl="$(ConsoleStubberUrl)"
                  DestinationFolder="$(IntermediateOutputPath)"
                  SkipUnchangedFiles="true">
      <Output TaskParameter="DownloadedFile"
              PropertyName="ConsoleStubberTool" />
    </DownloadFile>

    <Exec Command="&quot;$(ConsoleStubberTool)&quot; &quot;$(UnityAssembliesPath)Assembly-CSharp.dll.mdb')&quot;"
          WorkingDirectory="$(RefStubPath)">
      <Output TaskParameter="ExitCode"
              PropertyName="ConsoleStubberExitCode" />
    </Exec>
  
    <Warning Text="Failed to run ConsoleStubber $(ConsoleStubberExitCode)"
             Condition=" $(ConsoleStubberExitCode) != 0 " />
 
    <Warning Text="Missing ref-stubbed assembly @(StubberOutput)"
             Condition=" !Exists(%(FullPath)) " />
  
    <ItemGroup>
      <FileWrites Include="@(StubberOutput)" />
      <FileWrites Include="$(IntermediateOutputPath)ConsoleStubber.exe" />
    </ItemGroup>
  </Target>

  <Target Name="PublishGameXmlDocumentation"
          AfterTargets="AfterBuild"
          Condition=" '$(GameDocumentationFile)' != '' "
          Inputs="$(GameDocumentationFile)"
          Outputs="$(UnityAssembliesPath)Assembly-CSharp.xml">
  </Target>

  <Target Name="RunPdb2Mdb"
          Condition=" '$(TargetFramework)' == 'net35' "
          Inputs="@(MainAssembly)"
          Outputs="@(MainAssembly->'%(Identity).mdb')"
          DependsOnTargets="CopyFilesToOutputDirectory">
    <PropertyGroup>
      <Pdb2MdbUrl>https://gist.github.com/jbevain/ba23149da8369e4a966f/raw/36b3cdd4dd149ab966bbb48141ef8ee2d37c890f/pdb2mdb.exe</Pdb2MdbUrl>
    </PropertyGroup>
    
    <ItemGroup>
      <Pdb2MdbInput Include="@(MainAssembly)" />
      <Pdb2MdbOutput Include="@(MainAssembly->'%(Identity).mdb')" />
    </ItemGroup>
    
    <DownloadFile SourceUrl="$(Pdb2MdbUrl)"
                  DestinationFolder="$(IntermediateOutputPath)"
                  SkipUnchangedFiles="true">
      <Output TaskParameter="DownloadedFile"
              PropertyName="Pdb2MdbTool" />
    </DownloadFile>

    <Exec Command="&quot;$(Pdb2MdbTool)&quot; &quot;%(Pdb2MdbInput.Identity)&quot;"
          WorkingDirectory="@(Pdb2MdbInput->'%(rootdir)%(directory)')">
      <Output TaskParameter="ExitCode"
              PropertyName="Pdb2MdbExitCode" />
    </Exec>
  
    <Warning Text="Failed to run Pdb2Mdb $(Pdb2MdbExitCode)"
             Condition=" $(Pdb2MdbExitCode) != 0 " />
 
    <Warning Text="Missing mdb for assembly @(Pdb2MdbOutput)"
             Condition=" !Exists(%(FullPath)) " />
  
    <ItemGroup>
      <FileWrites Include="@(Pdb2MdbOutput)" />
      <FileWrites Include="$(IntermediateOutputPath)pdb2mdb.exe" />
    </ItemGroup>
  </Target>
</Project>